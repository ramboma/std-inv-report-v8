    # == == =已完成行转列
    # 就业率和就业状态
    further.work_option_report(data, CONFIG.REPORT_FOLDER + '就业机会.xlsx')
    further.non_employee_report(data, CONFIG.REPORT_FOLDER + '未就业分析.xlsx')
    further.employee_report(data, CONFIG.REPORT_FOLDER + '就业率及就业就业状态.xlsx')

    # 就业竞争力
    further.major_relative_report(data, CONFIG.REPORT_FOLDER + '专业相关度.xlsx')
    further.job_meet_report(data, CONFIG.REPORT_FOLDER + '职业期待吻合度.xlsx')

    further.job_satisfy_report(data, CONFIG.REPORT_FOLDER + '就业满意度.xlsx')
    further.work_stability_report(data, CONFIG.REPORT_FOLDER + '工作稳定性.xlsx')

    further.income_report(data, CONFIG.REPORT_FOLDER + '月均收入.xlsx')

    # 就业分布  行业和职业可以共用一套模板 **关于月均收入、满意度、相关度可以抽取
    further.employee_indurstry(data, CONFIG.REPORT_FOLDER + '就业行业分布.xlsx')
    further.employee_job(data, CONFIG.REPORT_FOLDER + '就业职业分布.xlsx')
    further.employee_industry_type(data, CONFIG.REPORT_FOLDER + '就业单位分布.xlsx')
    further.employee_industry_size(data, CONFIG.REPORT_FOLDER + '就业单位分布.xlsx')
    further.employee_region_report(data, CONFIG.REPORT_FOLDER + '就业地区分布.xlsx')

    # 求职过程与就业指导服务
    further.employee_difficult_report(data, CONFIG.REPORT_FOLDER + '求职过程.xlsx')

    # 母校综合评价
    further.school_satisfy_report(data, CONFIG.REPORT_FOLDER + '母校满意度.xlsx')
    further.school_recommed_report(data, CONFIG.REPORT_FOLDER + '母校推荐度.xlsx')

    # 学生指导与服务
    further.evelution_H4_Q_report(data, CONFIG.REPORT_FOLDER + '对学生生活服务的评价.xlsx')
    further.evelution_H4_P_report(data, CONFIG.REPORT_FOLDER + '对学生管理工作的评价.xlsx')
    further.evelution_H4_F_K_report(data, CONFIG.REPORT_FOLDER + '对就业教育服务的评价.xlsx')
    further.evelution_H4_L_O_report(data, CONFIG.REPORT_FOLDER + '对创业教育服务的反馈.xlsx')

    # 附加题
    further.evelution_H4_R_report(data, CONFIG.REPORT_FOLDER + '社团活动.xlsx')
    further.evelution_academic_report(data, CONFIG.REPORT_FOLDER + '母校学风认可度.xlsx')
    further.evelution_H4_T_report(data, CONFIG.REPORT_FOLDER + '教育教学总体评价.xlsx')
    further.evelution_H4_S_report(data, CONFIG.REPORT_FOLDER + '实践教学的评价.xlsx')
    further.evelution_H4_E_report(data, CONFIG.REPORT_FOLDER + '任课教师.xlsx')

    #国内升学
    further.further_report(data, CONFIG.REPORT_FOLDER + '国内升学.xlsx')

    # 出国境留学
    further.study_abroad_report(data, CONFIG.REPORT_FOLDER + '出国境留学.xlsx')
    # 自主创业
    further.self_employed_report(data, CONFIG.REPORT_FOLDER + '自主创业.xlsx')
    # 人才培养
    further.evelution_practice_report(data, CONFIG.REPORT_FOLDER + '对实践教学的评价.xlsx')
    further.evelution_lesson_report(data, CONFIG.REPORT_FOLDER + '对课堂教学的评价.xlsx')
    further.evelution_teach_report(data, CONFIG.REPORT_FOLDER + '对任课教师的评价.xlsx')

    # 特殊人群
    further.special_gender_report(data, CONFIG.REPORT_FOLDER + '不同性别.xlsx')
    further.special_education_report(data, CONFIG.REPORT_FOLDER + '教育行业和非教育行业.xlsx')
    further.special_origin_province_report(data, CONFIG.REPORT_FOLDER + '省内省外生源.xlsx')
    further.special_indurstry_province_report(data, CONFIG.REPORT_FOLDER + '省内省外就业.xlsx')
    further.special_national_report(data, CONFIG.REPORT_FOLDER + '汉族少数名族.xlsx')
    further.special_medical_report(data, CONFIG.REPORT_FOLDER + '医疗卫生职业.xlsx')
    further.special_social_health_report(data, CONFIG.REPORT_FOLDER + '卫生和社会工作.xlsx')

    # 学习效果
    further.major_quality_report(data, CONFIG.REPORT_FOLDER + '专业素质.xlsx')
    further.basic_quality_report(data, CONFIG.REPORT_FOLDER + '基础素质.xlsx')


## unstack方式转置，不限定类型为number但是会造成列名合并（'比例 一般'）
df_will_t = df_data.loc[:,
                [CONFIG.GROUP_COLUMN[0], CONFIG.GROUP_COLUMN[1],
                 CONFIG.RATE_COLUMN[0], CONFIG.RATE_COLUMN[-1]]]
    df_unstack=df_will_t.set_index([CONFIG.GROUP_COLUMN[0],
                         CONFIG.GROUP_COLUMN[1],
                         CONFIG.RATE_COLUMN[0]]).unstack(level=[CONFIG.RATE_COLUMN[0]])
    df_unstack.fillna('0.00%', inplace=True)

## privot_table方式转置，列名不变，但是限定必须是可计算类型
df_metrics = pd.pivot_table(df_data,
                                index=[CONFIG.GROUP_COLUMN[0], CONFIG.GROUP_COLUMN[1]],
                                columns=CONFIG.RATE_COLUMN[0],
                                values=CONFIG.RATE_COLUMN[-1])

# Assemble all analyzers need to be run
    analyzer_collection = dict()
    # analyze 1
    analyzer_collection['就业率及就业状态'] = EmpRateAndEmpStatus(df)

    analyzer_collection['就业机会'] = WorkOptionDataAnalyzer(df, dic_config)
    # analyze 2
    analyzer_collection['未就业分析'] = NonEmployeeDataAnalyzer(df, dic_config)
    # analyze 2
    analyzer_collection['专业相关度'] = MajorRelativeAnalyzer(df, dic_config)
    analyzer_collection['就业满意度'] = JobSatisfyAnalyzer(df, dic_config)
    analyzer_collection['职业期待吻合度'] = JobMeetAnalyzer(df, dic_config)
    analyzer_collection['工作稳定性'] = WorkStabilityAnalyzer(df, dic_config)
    analyzer_collection['月均收入'] = IncomeAnalyzer(df, dic_config)

    analyzer_collection['就业职业分布'] = EmpJobAnalyzer(df, dic_config)
    analyzer_collection['就业行业分布'] = EmpIndurstryAnalyzer(df, dic_config)
    analyzer_collection['就业地区分布'] = EmpRegionAnalyzer(df, dic_config)
    analyzer_collection['就业单位分布'] = EmpIndurstryTypeSizeAnalyzer(df, dic_config)
    # ... analyze N
    analyzer_collection['任课教师'] = EvelutionH4_PAnalyzer(df, dic_config)
    analyzer_collection['社团活动'] = EvelutionH4_RAnalyzer(df, dic_config)
    analyzer_collection['母校学风认可度'] = EvelutionAcademicAnalyzer(df, dic_config)
    analyzer_collection['教育教学总体评价'] = EvelutionH4_TAnalyzer(df, dic_config)
    analyzer_collection['实践教学的评价'] = EvelutionH4_SAnalyzer(df, dic_config)
    # ...
    analyzer_collection['自主创业'] = SelfEmpAnalyzer(df, dic_config)
    analyzer_collection['求职过程'] = EmpDifficultAnalyzer(df, dic_config)
    # ... 母校满意度
    analyzer_collection['母校满意度'] = SchoolSatisfyAnalyzer(df, dic_config)
    analyzer_collection['母校推荐度'] = SchoolRecommedAnalyzer(df, dic_config)

    analyzer_collection['对就业教育服务的反馈'] = EvelutionH4_F_KAnalyzer(df, dic_config)
    analyzer_collection['对学生管理工作的评价'] = EvelutionH4_PAnalyzer(df, dic_config)
    analyzer_collection['对学生生活服务的评价'] = EvelutionH4_QAnalyzer(df, dic_config)
    analyzer_collection['对创业教育服务的反馈'] = Evelution_H4_L_OAnalyzer(df, dic_config)

    analyzer_collection['国内升学'] = FurtherAnalyzer(df, dic_config)
    analyzer_collection['出国境留学'] = StudyAbroadAnalyzer(df, dic_config)

    analyzer_collection['对任课教师的评价'] = EvelutionTeacherAnalyzer(df, dic_config)
    analyzer_collection['对实践教学的评价'] = EvelutionPracticeAnalyzer(df, dic_config)
    analyzer_collection['对课堂教学的评价'] = EvelutionLessonAnalyzer(df, dic_config)


    analyzer_collection['不同性别'] = SpecialGenderAnalyzer(df, dic_config)
    analyzer_collection['汉族少数民族'] = SpecialNationalAnalyzer(df, dic_config)
    analyzer_collection['教育行业非教育行业'] = SpecialEducationAnalyzer(df, dic_config)

    analyzer_collection['省内省外生源'] = SpecialOriginProvinceAnalyzer(df, dic_config)
    analyzer_collection['省内、省外就业'] = SpecialProvinceAnalyzer(df, dic_config)
    analyzer_collection['医疗卫生职业'] = SpecialMedicalAnalyzer(df, dic_config)

    analyzer_collection['卫生和社会工作'] = SpecialSocialHealthAnalyzer(df, dic_config)

    analyzer_collection['基础能力素质'] = BasicQualityAnalyzer(df, dic_config)
    analyzer_collection['专业素质'] = MajorQualityAnalyzer(df, dic_config)
    ls_metric = list(set(df['_12']))
    if len(ls_metric) > 1:
        analyzer_collection['总体毕业生一览表'] = OverallSummary(df, dic_config)
    for metric in ls_metric:
        df_filter = df[df['_12'] == metric]
        if not df_filter.empty:
            analyzer_collection[metric + "一览表"] = OverallSummary(df_filter, dic_config)


    def run(self, analyzer, name):
        try:
            result = analyzer.analyse()
            self._write.write_new_book('{}.xlsx'.format(name), result)
        except Exception as e:
            # log error message to log file
            # write user friendly error file
            # normal exit for next analyzer running
            print(e)
            pass
        finally:
            pass

# 筛选出学历 如果为多学历需要计算总体
        ls_metric = list(set(df[self._degree_col]))
        if len(ls_metric) > 1:
            result["总体毕业生各学院" + sheet_name] = GrpFiveCalculator(df, self._question_col,
                                                                [CONFIG.BASE_COLUMN[0]],
                                                                self._metric_type).calculate()
            result["总体毕业生各专业" + sheet_name] = GrpFiveCalculator(df, self._question_col,
                                                                [CONFIG.BASE_COLUMN[0], CONFIG.BASE_COLUMN[1]],
                                                                self._metric_type).calculate()

        for metric in ls_metric:
            df_filter = df[df[self._degree_col] == metric]
            result[metric + "各学院" + sheet_name] = GrpFiveCalculator(df_filter, self._question_col,
                                                                    [CONFIG.BASE_COLUMN[0]],
                                                                    self._metric_type).calculate()
            result[metric + "各专业" + sheet_name] = GrpFiveCalculator(df_filter, self._question_col,
                                                                    [CONFIG.BASE_COLUMN[0], CONFIG.BASE_COLUMN[1]],
                                                                    self._metric_type).calculate()
                                                                   df_demission["离职率"] = 0
        for col in CONFIG.DIMISSION_COLUMNS:
            if col in df_demission.columns:
                df_demission.loc[:, "离职率"] = df_demission.loc[:, "离职率"] + df_demission.loc[:, col]
